type Employee {
  LoginAlias: String
  FirstName: String
  LastName: String
  ManagerLoginAlias: String
  Skills: [String]
  Department: String
  JoinDate: Date
}

type EmployeeDataWithCount {
  """
  This is the total number of records scanned before returning the filtered records.
  It is NOT the number of records returned as data.
  """
  count: Int!
  data: [Employee]!
  """
  The lastEvaluatedKey is only returned when there are more items left to process
  but were clipped for pagination. Passing this back as a parameter will cause
  the pagination to continue.
  """
  lastEvaluatedKey: String
}

type Query {
  getEmployeeByLoginAlias(id: String!): Employee

  getEmployeeByName(
    firstName: NonEmptyString!
    limit: Int
    lastEvaluatedKey: String
  ): EmployeeDataWithCount!

  """
  Scan full database and filter the results based on optional conditions.
  Conditional values must be an exact match unless specified otherwise.
  """
  getAllEmployees(
    limit: Int
    lastEvaluatedKey: String
    firstName: String
    lastName: String
    loginAlias: String
    managerLoginAlias: String
    """
    Provided value is checked based on exact match. Case sensitive
    """
    skills: [String!]
    department: NonEmptyString
  ): EmployeeDataWithCount!
}

type Mutation {
  """
  Adds a new employee record
  """
  addEmployee(
    loginAlias: NonEmptyString!
    firstName: String
    lastName: String
    managerLoginAlias: String
    skills: [NonEmptyString!]
    department: NonEmptyString
    joinDate: Date
  ): String
  """
  Deletes an employee record
  """
  deleteEmployee(loginAlias: NonEmptyString!): Employee
}
